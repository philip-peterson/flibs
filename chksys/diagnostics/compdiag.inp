! compdiag.inp --
!     File with the code for the test programs that are used
!     to analyse the behaviour of the compiler
!     Each test program should be documented using:
!     @desc - short textutal description (also start of
!             new test program)
!     @category - one of:
!              basic      - basic checks of certain aspects
!              medium     - checks that require more analysis
!              advanced   - checks for trickier aspects
!              limitation - known limitations of certain compilers
!                           (success means the current compiler supports
!                           that feature)
!              extension  - checks whether popular extensions are
!                           supported
!              f2003      - checks for Fortran 2003 features
!
!              Note that the categories basic, medium and advanced
!              are fairly subjective.
!

@desc Does the compiler check the values of keywords to OPEN
@category basic
program check
    open( 10, file = 'check.inp', form = 'nonsense' )
end program

@desc Does the compiler accept FORM="BINARY"
@category extension
program check
    open( 10, file = 'check.inp', form = 'binary' )
end program

@desc Function that does not set the value
@category basic
real function check( x )
    real :: x
end function check

@desc Function that does not always set the value
@category medium
real function check( x )
    real :: x
    if ( x > 0 ) then
        check = 2.0
    endif
end function check

@desc Using function variable before it is set
@category medium
real function check( x )
    real :: x
    if ( check > 0 ) then
        check = 2.0 * x
    endif
end function check

@desc Unused argument in subroutine
@category medium
subroutine check( x )
    real :: x
    real :: y

    y = 10.0
end subroutine check

@desc Tabs are accepted
@category extension
program check
	write(*,*)	'Tabs allowed'
end program check

@desc Interface required because of optional arguments
@category basic
subroutine check( x, opt )
    real :: x
    logical, optional :: opt
    logical :: opt_
    opt_ = .false.
    if ( present(opt) ) then
        opt_ = opt
    endif
    if ( opt_ ) then
        write(*,*) 'X: ', x
    else
        write(*,*) x
    endif
end subroutine check

@desc Interface required because of pointer arguments
@category basic
subroutine check( x )
    real, pointer, dimension(:) :: x
    write(*,*) x
end subroutine check

@desc Interface required because of assumed shape arguments
@category basic
subroutine check( x )
    real, dimension(:) :: x
    write(*,*) x
end subroutine check

@desc Using a real as the control variable of a DO loop
@category basic
program check
    real :: x

    do x = 0.1,1.0,0.1
        write(*,*) x
    enddo
end program check

@desc Duplicate case in SELECT block
@category basic
program check
    integer :: x

    do x = 1,10
        select case ( x )
            case( 1, 2, 3 )
                write(*,*) x
            case( 3 )
                write(*,*) x
            case default
                write(*,*) x
        end select
    enddo
end program check

@desc Duplicate case in SELECT block - same case
@category basic
program check
    integer :: x

    do x = 1,10
        select case ( x )
            case( 1, 1, 3 )
                write(*,*) x
            case( 4 )
                write(*,*) x
            case default
                write(*,*) x
        end select
    enddo
end program check

@desc Missing default case in SELECT block - defensive programming
@category advanced
program check
    integer :: x

    do x = 1,10
        select case ( x )
            case( 1, 2, 3 )
                write(*,*) x
            case( 4 )
                write(*,*) x
        end select
    enddo
end program check

@desc Uninitialised variable used - defensive programming
@category basic
program check
    integer :: x
    integer :: y

    y = x
end program check

@desc Uninitialised variable printed - defensive programming
@category basic
program check
    integer :: x

    write(*,*) x
end program check

@desc Mismatch in static shapes of arrays - assignment
@category basic
program check
    integer, dimension(4) :: x
    integer, dimension(5) :: y

    x = 1
    y = x
end program check

@desc Mismatch in static shapes of arrays - merge function
@category basic
program check
    integer, dimension(4) :: x
    integer, dimension(5) :: y
    logical, dimension(5) :: z
    x = 1
    z = .true.
    write(*,*) merge( x, y, z )
end program check

@desc Mismatch in static shapes of array sections
@category basic
program check
    integer, dimension(4) :: x
    integer, dimension(5) :: y

    x = 1
    y(:) = x(:)
end program check

@desc Using array element out of bounds
@category basic
program checkit
    integer, dimension(4) :: x

    x = 0
    call check
    write(*,*) x
contains
subroutine check
    x(5) = 1
end subroutine check
end program checkit

@desc Mismatch in static shapes of arrays - user-defined function
@category advanced
program check
    integer, dimension(4) :: x
    integer, dimension(5) :: y
    x = 1
    y = f(x)
contains
function f( x )
    integer, dimension(:) :: x
    integer, dimension(size(x)) :: f
    f = x
end function f
end program check

@desc Accepting different string lengths in array constructor
@category extension
program check

    write(*,*) (/ 'A', 'BBB' /)
end program check

@desc Accepting square brackets in array constructor
@category f2003
program check

    write(*,*) [ 1, 2, 3 ]
end program check

@desc Accepting different string lengths in MERGE function
@category extension
program check

    logical :: cond

    cond = .false.
    write(*,*) merge( 'true', 'false', cond )
end program check

@desc Accepting different numerical types in MERGE function
@category basic
program check

    logical :: cond

    ! There is no sensible type for the result!
    cond = .false.
    write(*,*) merge( 1, 2.0, cond )
end program check

@desc Violating intent() constraint - input only
@category basic
subroutine check( x )
    real, intent(in) :: x

    x = 2.0
end subroutine check

@desc Violating intent() constraint - output only
@category basic
subroutine check( x )
    real, intent(out) :: x

    ! x not set
end subroutine check

@desc Violating intent() constraint - checking output only variable before set
@category medium
subroutine check( x )
    real, intent(out) :: x

    ! x not yet set
    if ( x > 0.0 ) then
        write(*,*) 'x positive'
    endif
    x = -1.0
end subroutine check

@desc Violating intent constraint via second subprogram
@category medium
subroutine check( x )
    real, intent(in) :: x

    call check2
contains
subroutine check2
    x = -1.0
end subroutine check2
end subroutine check

@desc Resetting do-loop variable directly
@category basic
subroutine check( x )
    real    :: x
    integer :: i

    x = 0.0
    do i = 1,10
       x = x + float(i)
       i = 100
    enddo
end subroutine check

@desc Resetting do-loop variable via subroutine
@category basic
subroutine check( x )
    real    :: x
    integer :: i

    x = 0.0
    do i = 1,10
       x = x + float(i)
       call check2
    enddo
contains
subroutine check2
    i = 100
end subroutine check2
end subroutine check

@desc Unreachable statement - do loop
@category basic
subroutine check
    integer :: i

    do i = 1,10
       exit
       write(*,*) i
    enddo
end subroutine check

@desc Unreachable statement - goto
@category basic
subroutine check( x )
    integer :: i

    goto 110
    x = 1
110 continue
    write(*,*) i
end subroutine check

@desc Straightforward endless loop - do while
@category basic
subroutine check
    integer :: i

    do while(.true.)
       i = 1
    enddo
end subroutine check

@desc Straightforward endless loop - do
@category basic
subroutine check
    integer :: i

    do
       i = 1
    enddo
end subroutine check

@desc Straightforward endless loop - condition does not change
@category medium
subroutine check
    integer :: i
    logical :: cond

    cond = .true.
    do while( cond )
       i = 1
    enddo
end subroutine check

@desc Allocatable arguments to a subroutine
@category f2003
program checkit
    real, allocatable, dimension(:) :: x

    call check( x )
contains
subroutine check( x )
    real, allocatable, dimension(:) :: x

    allocate( x(10) )
end subroutine check
end program checkit

@desc Allocatable components in a derived type
@category f2003
program check
    type allocs
        real, allocatable, dimension(:) :: x
    end type allocs

    type(allocs) :: value

    allocate( value%x(10) )
end program check

@desc Integer overflow at compile time
@category basic
program check
    integer :: y

    y = 2 * huge(1)
end program check

@desc Transcendental functions in parameter statement
@category extension
program check
    real, parameter :: x = sin(1.0)
end program check

@desc Loss of precision
@category basic
program check
    real :: x

    x = 1.0d0 / 3.0d0
end program check

@desc Comparing reals
@category basic
program check
    real :: x
    real :: y

    x = 1.0 / 3.0
    y = real(1.0d0 /3.0d0, kind(y))
    if ( x == y ) then
        write(*,*) 'Equal'
    endif
end program check

@desc Pointer to a variable that is not a target
@category basic
program check
    real, pointer :: x
    real          :: y

    x => y
    y = 1.0
    write(*,*) x
end program check

@desc Using unassociated pointer variable
@category basic
program check
    real, dimension(:), pointer :: x

    nullify( x )
    x = 1.0
end program check

@desc Using unallocated allocatable array
@category basic
program check
    real, dimension(:), allocatable :: x

    x = 1.0
end program check

@desc Assumed-length string supported
@category limitation
subroutine check( length )
    !
    ! Some compilers do not support this feature
    !
    character(len=length) :: string

    string = repeat('x', length)
end subroutine check

@desc Mixed-precision computations
@category basic
real function check( x, y )
    real(kind=kind(1.0d0)) :: x
    real                   :: y

    check = x * y
end function check

@desc Mixed-precision initialisation
@category basic
program check
    real(kind=kind(1.0d0)) :: x = 1.01
    real(kind=kind(1.0d0)) :: y = 1.01d0

    write(*,*) x == y
end program check

@desc Mixed-precision array construction
@category basic
program check
    real(kind=kind(1.0d0)), dimension(2) :: x

    x = (/ 1.0, 2.0d0 /)
    write(*,*) x
end program check

@desc IOMSG keyword supported
@category f2003
program check
    integer           :: ierr
    character(len=80) :: msg
    open( 10, file = 'check.inp', status = 'old', iostat = ierr, &
        iomsg = msg )
end program

@desc ISO_FORTRAN_ENV module supported
@category f2003
program check
    use iso_fortran_env
    implicit none
    write(*,*) iostat_eor
end program

@desc FLUSH statement supported
@category f2003
program check
    implicit none
    write(*,'(1x,a)') "prompt"
    flush( 6 )
end program

@desc Very long identifiers are truncated
@category basic
program check
    this_is_an_identifier_name_which_exceeds_32_characters = 1.0
end program

@desc Very long identifiers are truncated and mapped to the same name
@category basic
program check
    this_is_an_identifier_name_which_exceeds_32_characters     = 1.0
    this_is_an_identifier_name_which_exceeds_32_characters_too = 2.0
end program

@desc Backslashes are ordinary characters
@category other
program check
    character(len=2) :: string
    string = '\'
end program

@desc Formats are checked with the transfer list at compile time
@category advanced
program check
    integer :: a
    write(*,'(a)') a
end program
